using CodegenCS;
using Domain.Utils;
using Microsoft.OpenApi.Any;
using Microsoft.OpenApi.Models;
using Serilog;
using static Domain.Utils.StringUtils;

namespace Domain.Generators
{
    public static class ModelsEntityGenerator
    {

        public static void Generator(OpenApiDocument doc, string tempFilePath, bool save = true)
        {
            Log.Debug($"Generate Entity Models");
            string ns = "Entities";

            var apigenModels = (OpenApiObject)doc.Components.Extensions.FirstOrDefault(x => x.Key.Equals("x-apigen-models")).Value;

            if (apigenModels != null)
            {
                foreach (var entity in apigenModels)
                {
                    GenerateEntity(entity, ns, tempFilePath).SaveToFile(save);
                }
            }

        }

        public static (ICodegenOutputFile, string?) GenerateEntity(KeyValuePair<string, IOpenApiAny> entity, string ns, string tempFilePath)
        {
            string cl = $"{FormatName(entity.Key)}Entity";

            var ctx = new CodegenContext();
            var w = ctx[$"{cl}.cs"];
            w.WriteLine("using System.ComponentModel.DataAnnotations.Schema;");
            w.WriteLine("using System.Text.Json.Serialization;\n");

            w.WithCurlyBraces($"namespace {ns}", () =>
            {
                w.WithCurlyBraces($"public class {cl}", () =>
                {

                    var attribute = ((OpenApiObject)entity.Value).FirstOrDefault(x => x.Key.Equals("attributes"));

                    foreach (OpenApiObject propertie in (OpenApiArray)attribute.Value)
                    {

                        var name = (OpenApiString)propertie.FirstOrDefault(x => x.Key.Equals("name")).Value;
                        var type = (OpenApiString)propertie.FirstOrDefault(x => x.Key.Equals("type")).Value;
                        var itemsType = (OpenApiString)propertie.FirstOrDefault(x => x.Key.Equals("items-type")).Value;
                        OpenApiString? column = null;
                        //var validations = (OpenApiArray)propertie.FirstOrDefault(x => x.Key.Equals("validations")).Value;
                        var relationalPersistence = (OpenApiObject)propertie.FirstOrDefault(x => x.Key.Equals("relational-persistence")).Value;

                        if (relationalPersistence != null)
                        {
                            var key = (OpenApiBoolean)relationalPersistence.FirstOrDefault(x => x.Key.Equals("primary-key")).Value;
                            //var autogenerated = (OpenApiBoolean)relationalPersistence.FirstOrDefault(x => x.Key.Equals("autogenerated")).Value;
                            column = (OpenApiString)relationalPersistence.FirstOrDefault(x => x.Key.Equals("column")).Value;
                            //var foreignColumn = (OpenApiString)relationalPersistence.FirstOrDefault(x => x.Key.Equals("foreign-column")).Value;
                            //var intermediateTable = (OpenApiString)relationalPersistence.FirstOrDefault(x => x.Key.Equals("intermediate-table")).Value;

                            if (key != null && key.Value)
                                w.WriteLine("[DatabaseGenerated(DatabaseGeneratedOption.Identity)]");

                            if (column != null)
                                w.WriteLine($"public {FormatType(column.PrimitiveType.ToString())} {FormatName(column.Value)} {{get; set;}}");
                        }

                        w.WriteLine($"public {FormatTypeEntity(type.Value, itemsType)} {FormatName(name.Value)} {{get; set;}}");

                    }

                });
            });

            return (w, $"{tempFilePath}/Infrastructure/{ns}/");

        }

    }
}
